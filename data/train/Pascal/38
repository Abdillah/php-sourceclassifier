program A;

{$mode objfpc}{$H+}

uses
  {$IFDEF UNIX}{$IFDEF UseCThreads}
  cthreads,
  {$ENDIF}{$ENDIF}
  Classes
  { you can add units after this };

var
  Table: array [0..4] of AnsiString;

procedure ReadData;
var
  r, c: Integer;

begin
  for r:= 1 to 4 do
    ReadLn (Table [r]);
  ReadLn;

end;

function Solve: AnsiString;
const
  Msg: array [1..4] of AnsiString=
     ('X won',
      'O won',
      'Draw',
      'Game has not completed');

function Won (Player: char): Boolean;
var
  r, c: Integer;

begin
  Result:= False;

  for r:= 1 to 4 do
  begin
    Result:= True;

    for c:= 1 to 4 do
      if not (Table [r, c] in [Player, 'T']) then
      begin
        Result:= False;
        break;

      end;

    if Result then
      Exit;

  end;

  for c:= 1 to 4 do
  begin
    Result:= True;

    for r:= 1 to 4 do
      if not (Table [r, c] in [Player, 'T']) then
      begin
        Result:= False;
        break;

      end;

    if Result then
      Exit;

  end;

  Result:= True;
  for r:= 1 to 4 do
    if not (Table [r, r] in [Player, 'T']) then
    begin
      Result:= False;
      break;

    end;

  if Result then
    Exit;

  Result:= True;
  for r:= 1 to 4 do
    if not (Table [5- r, r] in [Player, 'T']) then
    begin
      Result:= False;
      break;

    end;

  if Result then
    Exit;


end;

function Completed: Boolean;
var
  r, c: Integer;

begin
  Result:= False;

  for r:= 1 to 4 do
    for c:= 1 to 4 do
      if Table [r, c]= '.' then
        Exit;

  Result:= True;

end;

var
  r, c: Integer;

begin
  if Won ('X') then
    Result:= Msg [1]
  else if Won ('O') then
    Result:= Msg [2]
  else if Completed then
    Result:= Msg [3]
  else
    Result:= Msg [4];
end;

var
  T: Integer;
  i: Integer;

begin
  ReadLn (T);

  for i:= 1 to T do
  begin
    ReadData;
    WriteLn ('Case #', i, ': ', Solve);

  end;
end.

