program TicTac;

var T,i:integer;

Procedure solve( tc: integer );

var res: string;
    b: array[0..4] of string;
    i, j, c: integer;
    ended: boolean;

Begin
    {read board}
    for i := 0 to 3 do begin readln(b[i]) end; readln;
    {for i := 0 to 3 do begin writeln( 'debug: b[', i, ']="', b[i], '"'); end;}
    res := '.';
    {find winner}
    {  horizontally }
    for i := 0 to 3 do
    begin
        c := 1;
        {writeln( 'debug: ''', b[i][0], ''' ''', b[i][1], ', ', (b[i][c] = 'X') or (b[i][c] = 'O') );}
        if ( ( (b[i][c] = 'X') or (b[i][c] = 'O') )
             and ( ( b[i][c] = b[i][2] ) or (b[i][2] = 'T') )
             and ( ( b[i][c] = b[i][3] ) or (b[i][3] = 'T') )
             and ( ( b[i][c] = b[i][4] ) or (b[i][4] = 'T') ) ) then
            res := b[i][c] + ' won';
        c := 2;
        if ( ( ( b[i][c] = 'X' ) or ( b[i][c] = 'O') )
             and ( ( b[i][c] = b[i][1] ) or (b[i][1] = 'T') )
             and ( ( b[i][c] = b[i][3] ) or (b[i][3] = 'T') )
             and ( ( b[i][c] = b[i][4] ) or (b[i][4] = 'T') ) ) then
            res := b[i][c] + ' won';
    end;

    if res[1] = '.'
    then
    begin
        for i := 1 to 4 do
        begin
            c := 0;
            if ( ( (b[c][i] = 'X') or (b[c][i] = 'O') )
               and ( ( b[c][i] = b[1][i] ) or (b[1][i] = 'T') )
               and ( ( b[c][i] = b[2][i] ) or (b[2][i] = 'T') )
               and ( ( b[c][i] = b[3][i] ) or (b[3][i] = 'T') ) ) then
            res := b[c][i] + ' won';
            c := 1;
            if ( ( (b[c][i] = 'X') or (b[c][i] = 'O') )
               and ( ( b[c][i] = b[0][i] ) or (b[0][i] = 'T') )
               and ( ( b[c][i] = b[2][i] ) or (b[2][i] = 'T') )
               and ( ( b[c][i] = b[3][i] ) or (b[3][i] = 'T') ) ) then
            res := b[c][i] + ' won';
        end
    end;

    {diagonal /}
    if res[1] = '.'
    then
    begin
        c := 0;
        if ( ( (b[c][4-c] = 'X') or (b[c][4-c] = 'O') )
             and ( ( b[1][3] = 'T') or ( b[1][3] = b[c][4-c] ) )
             and ( ( b[2][2] = 'T') or ( b[2][2] = b[c][4-c] ) )
             and ( ( b[3][1] = 'T') or ( b[3][1] = b[c][4-c] ) )
           ) then
           res := b[c][4-c] + ' won';
        c := 1;
        if ( ( (b[c][4-c] = 'X') or (b[c][4-c] = 'O') )
             and ( ( b[0][4] = 'T') or ( b[0][4] = b[c][4-c] ) )
             and ( ( b[2][2] = 'T') or ( b[2][2] = b[c][4-c] ) )
             and ( ( b[3][1] = 'T') or ( b[3][1] = b[c][4-c] ) )
           ) then
           res := b[c][4-c] + ' won';
    end;

    {diagonal \}
    if res[1] = '.'
    then
    begin
        c := 0;
        if ( ( (b[c][c+1] = 'X') or (b[c][c+1] = 'O') )
             and ( ( b[1][2] = 'T') or ( b[1][2] = b[c][c+1] ) )
             and ( ( b[2][3] = 'T') or ( b[2][3] = b[c][c+1] ) )
             and ( ( b[3][4] = 'T') or ( b[3][4] = b[c][c+1] ) )
           ) then
           res := b[c][c+1] + ' won';
        c := 1;
        if ( ( (b[c][c+1] = 'X') or (b[c][c+1] = 'O') )
             and ( ( b[0][1] = 'T') or ( b[0][1] = b[c][c+1] ) )
             and ( ( b[2][3] = 'T') or ( b[2][3] = b[c][c+1] ) )
             and ( ( b[3][4] = 'T') or ( b[3][4] = b[c][c+1] ) )
           ) then
           res := b[c][c+1] + ' won';
    end;

    if res[1] = '.'
    then
    begin
        ended := true;
        for i := 0 to 3 do
           for j := 1 to 4 do
               if b[i][j] = '.' then ended := false;

        if ended then res := 'Draw'
        else res := 'Game has not completed'
    end;
    writeln( 'Case #', tc, ': ', res );
End;

begin
    {writeln('test');}
    readln(T);
    for i := 1 to T do
        solve(i)
end.
