program mlb0;

{$mode objfpc}{$H+}     {$R+}

uses
  {$IFDEF UNIX}{$IFDEF UseCThreads}
  cthreads,
  {$ENDIF}{$ENDIF}
  Classes,
  { you can add units after this }
  Variants,crt;


const
     {inputfile = 'A-large.in';}
     inputfile = 'A-large.in';
     outputfile = 'A-large-output.txt';
var
   inf,outf:Text;

   curinstring:string;
   curinpos:longint;

procedure initfiles;
begin
     Assign(inf,inputfile);
     Reset(inf);
     Assign(outf,outputfile);
     ReWritE(outf);
     curinstring:='';
     curinpos:=1;
end;

function GetT:variant; { get token from file }
var
   g,ac:string;
begin
     while curinpos>length(curinstring) do {read new string from file }
     begin
          ReadLn(inf,curinstring);
          curinpos:=1;
     end;
     g:='';
     ac:=curinstring+' ';
     while ac[curinpos]<>' ' do
     begin
          g:=g+ac[curinpos];
          inc(curinpos);
     end;
     while (curinpos<=length(ac)) and (ac[curinpos]=' ') do
           inc(curinpos);
     GetT:=g;
end;

{ get rest of line in string }
function getline:string;
begin
     while curinpos>length(curinstring) do {read new string from file }
     begin
          ReadLn(inf,curinstring);
          curinpos:=1;
     end;
     getline:=Copy(curinstring,curinpos,Length(curinstring)-curinpos+1);
     curinpos:=length(curinstring)+1;
end;

procedure getarray(var a:array of variant);      { read array till end of line }
var
   g,l,ac:string;
   r,ns:word;
begin
     l:=getline;
     { count number of spaces }
     ns:=0;
     for r:=1 to length(l) do
         if l[r]=' ' then
            inc(ns);

(*     setlength(a,ns);  {richtig so?} *)
     r:=0; {richtig?}
     ac:=l+' ';

     while curinpos<length(ac) do
     begin
          g:='';
          while ac[curinpos]<>' ' do
          begin
                    g:=g+ac[curinpos];
                    inc(curinpos);
          end;
          a[r]:=g;
          inc(r);
          while ac[curinpos]=' ' do
                inc(curinpos);
     end;
end;

{ get tokens as you have space }
procedure getnarray(var a:array of variant);
var
   m:longint;
begin
     for m:=Low(a) to High(a) do
         a[m]:=getT;
end;


procedure swapvar(var a,b:int64);
var
   c:int64;
begin
     c:=a;
     a:=b;
     b:=c;
end;

{ Quicksort array }
procedure sort(var a:array of int64);

function divid(l,r:int64):longint;
var
   p:longint;
   j: LongInt;
   i: LongInt;
   t: Integer;
begin
     p:=Random(r-l+1)+l;
     i:=l;j:=r-1;
     swapvar(a[p],a[r]);
     repeat
           while (i<r) and (a[i]<=a[r]) do
                 inc(i);
           while (j>l) and (a[j]>=a[r]) do
                 dec(j);
           if i<j then
              swapvar(a[i],a[j]);
     until i>=j;
     swapvar(a[i],a[r]);
     divid:=i;
end;

procedure qsort(l,r:int64);
var
  t: LongInt;
begin
     if l<r then
     begin
          t:=divid(l,r);
          qsort(l,t-1);
          qsort(t+1,r);
     end;
end;

begin
     qsort(low(a),high(a));
end;

function ggT(a,b:int64):int64;       { assume a b non-negative! }
begin
     if a=0 then
        ggT:=b
     else
         if b=0 then
            ggT:=a
         else
             if a>=b then
                ggT:=ggT(a-(a div b)*b,b)
             else
                 ggT:=ggT(b-(b div a)*a,a);
end;

function kgV(a,b:int64):int64;    { assume a b non-negative! }
begin
     if (a=0) and (b=0) then
        kgV:=0
     else
         kgV:=(a div ggT(a,b))*b;
end;

function kgVmax(a,b,c:int64):int64;    { assume a b non-negative! returns c if kgV is larger than c }
var
   a0:int64;
begin
     if (a=0) and (b=0) then
        kgVmax:=0
     else
     begin
          a0:=a div ggT(a,b);
          if a0 > (c div b) then
             kgVmax:=c
          else
          begin
               kgVmax:=a0*b;
          end
     end;
end;

type
    bin_search_func=function(a:real):boolean;

{ binarysearch:
  g is a function which is true for x<X and false for x>X
    returns X }


function binarysearch(g:bin_search_func;startvalue,minvalue,maxvalue:real):real;
var
   cv,lb,ub:real;
begin
     cv:=startvalue;
     lb:=minvalue;
     ub:=maxvalue;
     repeat
           if g(cv) then
           begin
                lb:=cv;
                cv:=(ub+cv)/2;
           end
           else
           begin
                ub:=cv;
                cv:=(cv+lb)/2;
           end;
     until (ub-lb)<0.0000001;
     binarysearch:=cv;
end;

function binarysearch(g:bin_search_func;startvalue,minvalue:real):real; { assumes startvalue>0 }
var
   cv,lb,ub:real;
begin
     if startvalue<=0 then
     begin
          writeln('startvalue<0');
          halt;
     end;
     lb:=minvalue;
     ub:=startvalue;
     cv:=(ub+lb)/2;
     while g(ub) do
     begin
          lb:=ub;
          ub:=ub*2;
          cv:=(ub+lb)/2;
     end;
     repeat
           if g(cv) then
           begin
                lb:=cv;
                cv:=(ub+cv)/2;
           end
           else
           begin
                ub:=cv;
                cv:=(cv+lb)/2;
           end;
     until (ub-lb)<0.0000001;
     binarysearch:=cv;
end;



function min(s:Array of real):real;
var
  k: Integer;
begin
     min:=s[Low(s)];
     for k:=Low(s)+1 to High(s) do
     begin
          if min>s[k] then
             min:=s[k];
     end;
end;

function max(s:Array of real):real;
var
  k: Integer;
begin
     max:=s[Low(s)];
     for k:=Low(s)+1 to High(s) do
     begin
          if max<s[k] then
             max:=s[k];
     end;
end;


var
   n,nc,t,tc:longint;
   p:array[1..4] of string;
   st:string;
   i,j:byte;
   nx,no:byte;
   win:byte;

begin
     initfiles;
     t:=gett;
     for tc:=1 to t do
     begin
          writeln(tc);
          Write(outf,'Case #',tc,': ');

          for i:=1 to 4 do
            p[i]:=getline;

          win:=0;

          for j:=1 to 4 do
          begin
           nx:=0;
           no:=0;
           for i:=1 to 4 do
           begin
            if (p[i][j]='X') or (p[i][j]='T') then
             inc(nx);
            if (p[i][j]='O') or (p[i][j]='T') then
             inc(no);
           end;
           if (nx=4) then
            win:=1;
           if (no=4) then
            win:=2;
          end;
          for i:=1 to 4 do
          begin
           nx:=0;
           no:=0;
           for j:=1 to 4 do
           begin
            if (p[i][j]='X') or (p[i][j]='T') then
             inc(nx);
            if (p[i][j]='O') or (p[i][j]='T') then
             inc(no);
           end;
           if (nx=4) then
            win:=1;
           if (no=4) then
            win:=2;
          end;

          nx:=0;
          no:=0;

          for i:=1 to 4 do
          begin
            begin
            if (p[i][i]='X') or (p[i][i]='T') then
             inc(nx);
            if (p[i][i]='O') or (p[i][i]='T') then
             inc(no);
           end;
          end;
          if (nx=4) then
            win:=1;
          if (no=4) then
            win:=2;

          nx:=0;
          no:=0;
          for i:=1 to 4 do
          begin
            begin
            if (p[i][5-i]='X') or (p[i][5-i]='T') then
             inc(nx);
            if (p[i][5-i]='O') or (p[i][5-i]='T') then
             inc(no);
           end;
          end;
          if (nx=4) then
            win:=1;
          if (no=4) then
            win:=2;

          if (win=0) then
          begin
            for i:=1 to 4 do
            for j:=1 to 4 do
            if p[i][j]='.' then
             win:=3;
          end;


          case win of
          3: writeln(outf,'Game has not completed');
          0: writeln(outf,'Draw');
          1: writeln(outf,'X won');
          2: writeln(outf,'O won');
          end;
     end;

     close(inf);
     close(outf);
end.

