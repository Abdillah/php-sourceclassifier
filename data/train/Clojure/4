(ns cjqual.core
  (:require [clojure.java.io :as io])
  (:gen-class))

(defn make-grid [lines]
  (into (sorted-map) (apply concat (map-indexed (fn [l line]
                                        (into {} (map-indexed (fn [c v] [[l c] v]) line)))
                                                lines))))

(defn read-input [fname]
  (with-open [r (io/reader fname)]
    (map (comp make-grid vals)
         (partition-by #(int (quot (key %) 4)) 
                       (zipmap (range) (filter seq (rest (line-seq r))))))))

(def winseqs [[[0 0] [0 1] [0 2] [0 3]]
              [[1 0] [1 1] [1 2] [1 3]]
              [[2 0] [2 1] [2 2] [2 3]]
              [[3 0] [3 1] [3 2] [3 3]]
              [[0 0] [1 0] [2 0] [3 0]]
              [[0 1] [1 1] [2 1] [3 1]]
              [[0 2] [1 2] [2 2] [3 2]]
              [[0 3] [1 3] [2 3] [3 3]]
              [[0 0] [1 1] [2 2] [3 3]]
              [[3 0] [2 1] [1 2] [0 3]]])              

(defn who-wins [grid]
  (let [ws (map #(remove (partial = \T) (map grid %)) winseqs)]
    (cond 
      (some #(every? (partial = \X) %) ws) "X won"
      (some #(every? (partial = \O) %) ws) "O won"
      (some #(some (partial = \.) %) ws)   "Game has not completed"
      true                                 "Draw")))

(defn -main [in out]
  (spit out (apply str (map-indexed #(str "Case #" (inc %1) ": " (who-wins %2) "\n") (read-input in)))))
