#!/usr/bin/perl 

use warnings;
use strict;

# load lines into a matrix
sub load_lines_into_matrix {
	my (@matrix, $line);
	for my $i (0..3) {
		$line = <STDIN>;
		chomp $line;
		my @row = split //, $line;
		push @matrix, \@row;
	}
	return \@matrix;
}

# check if a given line is completed by player in first parameter
# return 0: completed by player
# return 1: completed but for no player
# return 2: incomplete
sub is_array_completed_by {
	my $ref = $_[0];
	my $other = $_[1];
	
	my ($incomplete, $result) = (0, 0);
	for my $elem ($_[2], $_[3], $_[4], $_[5]) {
		$incomplete = 2 if ($elem eq '.');
		$result = 1 if ($elem eq $other);
	}
	
	return ($incomplete)? $incomplete : $result;
}

# return message with current game state
sub get_state {
	my ($m) = @_; # 'm' is the matrix
	
	my ($player, $other) = ('X', 'O');
	my $incomplete = 0;
	for my $i (1..2) {
		# check rows
		my $part_result = is_array_completed_by ($player, $other, $m->[0][0], $m->[0][1], $m->[0][2], $m->[0][3]);
		if ($part_result == 0) {return "$player won";}
		elsif ($part_result == 2) {$incomplete = 1;}
		
		$part_result = is_array_completed_by ($player, $other, $m->[1][0], $m->[1][1], $m->[1][2], $m->[1][3]);
		if ($part_result == 0) {return "$player won";}
		elsif ($part_result == 2) {$incomplete = 1;}
		
		$part_result = is_array_completed_by ($player, $other, $m->[2][0], $m->[2][1], $m->[2][2], $m->[2][3]);
		if ($part_result == 0) {return "$player won";}
		elsif ($part_result == 2) {$incomplete = 1;}
		
		$part_result = is_array_completed_by ($player, $other, $m->[3][0], $m->[3][1], $m->[3][2], $m->[3][3]);
		if ($part_result == 0) {return "$player won";}
		elsif ($part_result == 2) {$incomplete = 1;}
		
		# check colums
		$part_result = is_array_completed_by ($player, $other, $m->[0][0], $m->[1][0], $m->[2][0], $m->[3][0]);
		if ($part_result == 0) {return "$player won";}
		elsif ($part_result == 2) {$incomplete = 1;}
		
		$part_result = is_array_completed_by ($player, $other, $m->[0][1], $m->[1][1], $m->[2][1], $m->[3][1]);
		if ($part_result == 0) {return "$player won";}
		elsif ($part_result == 2) {$incomplete = 1;}
		
		$part_result = is_array_completed_by ($player, $other, $m->[0][2], $m->[1][2], $m->[2][2], $m->[3][2]);
		if ($part_result == 0) {return "$player won";}
		elsif ($part_result == 2) {$incomplete = 1;}
		
		$part_result = is_array_completed_by ($player, $other, $m->[0][3], $m->[1][3], $m->[2][3], $m->[3][3]);
		if ($part_result == 0) {return "$player won";}
		elsif ($part_result == 2) {$incomplete = 1;}
		
		# check diagonals
		$part_result = is_array_completed_by ($player, $other, $m->[0][0], $m->[1][1], $m->[2][2], $m->[3][3]);
		if ($part_result == 0) {return "$player won";}
		elsif ($part_result == 2) {$incomplete = 1;}
		
		$part_result = is_array_completed_by ($player, $other, $m->[3][0], $m->[2][1], $m->[1][2], $m->[0][3]);
		if ($part_result == 0) {return "$player won";}
		elsif ($part_result == 2) {$incomplete = 1;}
		
		($player, $other) = ($other, $player);
	}
	
	return ($incomplete == 1)? "Game has not completed" : "Draw";
}

###############################################################
# Main execution

my $number_of_cases = <STDIN>;
chomp $number_of_cases;
my $case = 1;

while ($case <= $number_of_cases) {
	my $matrix = load_lines_into_matrix();
	<STDIN>;	# dump empty line
	my $state = get_state ($matrix);
	print "Case #$case: ${state}\n";
	$case++;
}
