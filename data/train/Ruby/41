#!/usr/bin/env ruby

def winning_pattern?(p, *args)
  args.select { |c| c == p || c == 'T' }.count == 4
end

def won?(p)
  (0..3).each do |i|
    return true if winning_pattern?(p, @board[i * 4], @board[i * 4 + 1], @board[i * 4 + 2], @board[i * 4 + 3])
  end

  (0..3).each do |i|
    return true if winning_pattern?(p, @board[i], @board[i + 4], @board[i + 8], @board[i + 12])
  end

  return true if winning_pattern?(p, @board[0 + 0], @board[1 + 4], @board[2 + 8], @board[3 + 12])

  return true if winning_pattern?(p, @board[0 + 3], @board[4 + 2], @board[8 + 1], @board[12 + 0])

  false
end

def x_won?
  won?('X')
end

def o_won?
  won?('O')
end

def draw?
  @board.select { |c| c == '.' }.empty?
end

def read
  @board = []
  4.times do
    @board << gets.chomp.split(//)
  end
  @board.flatten!
  gets
end

def solve
  # p @board
  if x_won?
    puts "Case ##{@case}: X won"
  elsif o_won?
    puts "Case ##{@case}: O won"
  elsif draw?
    puts "Case ##{@case}: Draw"
  else
    puts "Case ##{@case}: Game has not completed"
  end
  @case += 1
end

@case = 1

n = gets.to_i

n.times { read; solve }
