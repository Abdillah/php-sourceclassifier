#!/usr/bin/ruby

class Board

  RCD = [
         [[0, 0], [0, 1], [0, 2], [0, 3]],
         [[1, 0], [1, 1], [1, 2], [1, 3]],
         [[2, 0], [2, 1], [2, 2], [2, 3]],
         [[3, 0], [3, 1], [3, 2], [3, 3]],
         [[0, 0], [1, 0], [2, 0], [3, 0]],
         [[0, 1], [1, 1], [2, 1], [3, 1]],
         [[0, 2], [1, 2], [2, 2], [3, 2]],
         [[0, 3], [1, 3], [2, 3], [3, 3]],
         [[0, 0], [1, 1], [2, 2], [3, 3]],
         [[0, 3], [1, 2], [2, 1], [3, 0]]
        ]

  def initialize(board_array)
    @board_array = board_array
  end

  def is_O?(x, y)
    return @board_array[x][y] == "O" || @board_array[x][y] == "T"
  end

  def is_X?(x, y)
    return @board_array[x][y] == "X" || @board_array[x][y] == "T"
  end

  def is_empty?(x, y)
    return @board_array[x][y] == "."
  end

  def outcome
    complete = true
    RCD.each do |rcd|

      if is_empty?(rcd[0][0], rcd[0][1]) ||
        is_empty?(rcd[1][0], rcd[1][1]) ||
        is_empty?(rcd[2][0], rcd[2][1]) ||
        is_empty?(rcd[3][0], rcd[3][1])
        complete = false
      end

      if is_O?(rcd[0][0], rcd[0][1]) &&
        is_O?(rcd[1][0], rcd[1][1]) &&
        is_O?(rcd[2][0], rcd[2][1]) &&
         is_O?(rcd[3][0], rcd[3][1])
        return "O won"
      end

      if is_X?(rcd[0][0], rcd[0][1]) &&
        is_X?(rcd[1][0], rcd[1][1]) &&
        is_X?(rcd[2][0], rcd[2][1]) &&
        is_X?(rcd[3][0], rcd[3][1])
        return "X won"
      end

    end

    if complete
      return "Draw"
    else
      return "Game has not completed"
    end

  end

end

cases = gets.to_i
cases.times.each do |c|
  board_array = []
  4.times do
    line = gets
    board_array << [line[0], line[1], line[2], line[3]]
  end
  board = Board.new(board_array)
  outcome = board.outcome
  puts "Case ##{c + 1}: #{outcome}"
  gets # ignore
end
