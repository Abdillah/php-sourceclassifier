import io.Source
import java.io.PrintWriter

object GCJ2270488A {

  def solve(in: In, out: PrintWriter) {
    val ar = Array.fill(4)(in())
    def win(c: Char) = {
      val set = Set('T', c)
      (0 until 4).map(i => ar(i)(i)).forall(set) ||
      (0 until 4).map(i => ar(i)(3 - i)).forall(set) ||
      (0 until 4).exists { i =>
        (0 until 4).map(ar(i)(_)).forall(set) ||
        (0 until 4).map(ar(_)(i)).forall(set)
      }
    }
    out.println {
      if (win('X')) {
        "X won"
      } else if (win('O')) {
        "O won"
      } else if (ar.exists(_.contains("."))) {
        "Game has not completed"
      } else {
        "Draw"
      }
    }
  }

  def main(args: Array[String]) {
    val in: In = new In(Source.fromInputStream(System.in))
    val out: PrintWriter = new PrintWriter(System.out)
    for (test <- 1 to in().toInt) {
      out.print(s"Case #$test: ")
      solve(in, out)
      out.flush()
    }
    out.close()
  }

  class TokenIterator(iter: BufferedIterator[Char], delims: String) extends Iterator[String] {
    private val sb = new StringBuilder

    def hasNext: Boolean = {
      skipDelims()
      iter.hasNext
    }

    def skipDelims() {
      while (iter.hasNext && delims.indexOf(iter.head) != -1) {
        iter.next()
      }
    }

    def next(): String = {
      skipDelims()
      while (iter.hasNext && delims.indexOf(iter.head) == -1) {
        sb.append(iter.next())
      }
      val ret = sb.toString()
      sb.clear()
      ret
    }
  }

  class In(source: Source) {
    val iter = source.buffered

    val tokenIterator = new TokenIterator(iter, " \r\n")

    val lineIterator = new TokenIterator(iter, "\r\n")

    def apply() = tokenIterator.next()

    def apply(n: Int) = tokenIterator.take(n)
  }
}