import scala.io.Source

def printToFile(f: java.io.File)(op: java.io.PrintWriter => Unit) {
  val p = new java.io.PrintWriter(f)
  try { op(p) } finally { p.close() }
}

val cases = Source.fromFile("A-large.in").getLines().drop(1)

@inline def checkDiagonals(lines: Array[String], r: Char) = {
	(
		lines(0)(0) == r &
		lines(1)(1) == r &
		lines(2)(2) == r &
		lines(3)(3) == r 
	
		) || (
	
		lines(0)(3) == r &
		lines(1)(2) == r &
		lines(2)(1) == r &
		lines(3)(0) == r 
	)	
}


@inline def checkColumns(lines: Array[String], r: Char) = {
	(
		lines(0)(0) == r &
		lines(1)(0) == r &
		lines(2)(0) == r &
		lines(3)(0) == r 
	
		) || (
	
		lines(0)(1) == r &
		lines(1)(1) == r &
		lines(2)(1) == r &
		lines(3)(1) == r

		) || (

		lines(0)(2) == r &
		lines(1)(2) == r &
		lines(2)(2) == r &
		lines(3)(2) == r

		) || (

		lines(0)(3) == r &
		lines(1)(3) == r &
		lines(2)(3) == r &
		lines(3)(3) == r  
	)	
}

def solveFor(lines: Array[String], tReplacement: String) = {
	val r = tReplacement(0)
	lines.contains(tReplacement) || checkColumns(lines, r) || checkDiagonals(lines, r) 
}

def getResult(lines: Iterable[String]) = {
	val x = lines.take(4).map(line => line.replace('T', 'X')).toArray
	val y = lines.take(4).map(line => line.replace('T', 'O')).toArray
	(solveFor(x, "XXXX"), 
	 solveFor(y, "OOOO")) 
	match {
		case (true, true)  => "Draw"
		case (true, false) => "X won"
		case (false, true) => "O won"
		case (false, false) => 
			if (lines.exists(_.contains("."))) 
			"Game has not completed" 
			else "Draw"
	}
}

val data = cases.grouped(5).toList.zipWithIndex.map {
	case (lines, n) => 
		s"Case #${n+1}: ${getResult(lines)}"
}.seq

printToFile(new java.io.File("tick-tac-toe-tomek.out"))(p => {
  data.foreach(p.println)
})

data.foreach(println)

