var $, buf = [];
require("readline").createInterface({
    input: process.stdin,
    output: process.stdout,
    terminal: false
}).on("line", function(line) {
    buf.push(line.slice(0, -1));
}).on("close", main);

// evil shorthand!
$ = {
	macro: [
		// for(i;n;) => for(var i = 0; i < n; ++i)
		[/for\s*\(\s*(\w+)\s*;\s*([^;\)]+);\s*\)/g, "for (var $1 = 0; $1 < $2; ++$1)"],
		// for(i;a;b) => for(var i = a; i < b; ++i)
		[/for\s*\(\s*(\w+)\s*;\s*([^;\)]+);\s*([^;\)]+)\)/g, "for (var $1 = $2; $1 < $3; ++$1)"],
		// function solve(N, M, L) { => function solve() { var N = geti(), M = geti(), L = geti();
		[/function\s+solve\s*\(([\s\w,]+)\)\s*\{/g, function(s0, s1) { return "function solve() {\n\tvar " + s1.split(",").map(function(e) { return e + " = geti()"; }).join(",");}]
	],
	// input utils
	get: function() {
		return buf.get();
	},
	skip: function() {
		buf.get();
	},
	getl: function() {
		return buf.line();
	},
	geti: function() {
		var s = buf.get();
		return parseInt(s, 10);
	},
	getx: function() {
		var s = buf.get();
		return parseInt(s, 16);
	},
	getb: function() {
		var s = buf.get();
		return parseInt(s, 2);
	},
	getf: function() {
		var s = buf.get();
		return parseFloat(s);
	},
	geta: function() {
		/* for
		S S ... S
		*/
		return buf.line().split(" ");
	},
	getm: function(n) {
		/* for
		S S S S
		.......
		S S S S
		*/
		var a = [], i;
		for (i = 0; i < n; ++i) {
			a.push(this.geta());
		}
		return a;
	},
	getcm: function(n) {
		/* for
		CCCCCCC
		.......
		CCCCCCC
		*/
		var a = [], i;
		for (i = 0; i < n; ++i) {
			a.push(buf.line());
		}
		return a; // array of string
	},

	// import Math
	min: Math.min,
	max: Math.max,
	abs: Math.abs,
	sin: Math.sin,
	cos: Math.cos,
	tan: Math.tan,
	sqrt: Math.sqrt,
	pow: Math.pow,
	floor: Math.floor,
	ceil: Math.ceil,
	E: Math.E,
	PI: Math.PI,
	INF: Infinity,
	gcd: function(a, b) {
		return b ? arguments.callee(b, a % b) : a;
	},
	lcm: function(a, b) {
		return b * a / this.gcd(a, b);
	},

	// other utils
	exec: function(fn) {
		if (!fn.cache) {
			fn.cache = "(" + fn.toString() + ")();";
			this.macro.forEach(function(e) {
				fn.cache = fn.cache.replace(e[0], e[1]);
			});
		}
		with (this) return eval(fn.cache);
	},
	clone: function(o) {
	    var f = function(){};
	    f.prototype = o;
	    return new f;
	},
	mix: function(base, append, append2) {
		if (append2) append = arguments.callee(append, append2);
		for (var i in append) base[i] = append[i];
		return base;
	},
	dim2: function(x, y, init) {
		init = init || 0;
		return [].fill([].fill(init, y), x);
	},
	dim3: function(x, y, z, init) {
		var a = [];
		init = init || 0;
		for (var i = 0; i < x; ++i) {
			a.push(this.dim2(y, z, init));
		}
		return a;
	},
	log: function() {
		console.log.apply(console, arguments);
	}
};

// prototype pollution. be careful to use for-in
$.mix(Array.prototype, {
	clone: function() {
		return Array.apply(null, this);
	},
	fill: function(v, n) {
		if (n !== void 0) this.length = n;
		for (var i =  0, l = this.length; i < l; ++i) {
			this[i] = v.length === void 0 ? v : v.clone();
		}
		return this;
	},
	int: function() {
		return this.map(function(e) {
			return parseInt(e, 10);
		});
	},
	float: function() {
		return this.map(function(e) {
			return parseFloat(e);
		});
	},
	str: function() {
		return this.map(function(e) {
			return e.toString();
		});
	},
	sum: function() {
		for(var i = 0, sum = 0; i < this.length; sum += this[i++]);
		return sum;
	},
	min: function() {
		return Math.min.apply({}, this)
	},
	max: function() {
		return Math.max.apply({}, this)
	},
	sortNum: function() {
	   return this.sort(function(a, b) {return a - b;});
	},
	find: function(e, startIndex) {
		var i = startIndex || 0;
		for (var l = this.length; i < l; ++i) {
			if (this[i] == e) {
				return i;
			}
		}
		return -1;
	},
	count: function(e) {
		var c = 0;
		for (var i = 0, l = this.length; i < l; ++i) {
			if (this[i] == e) {
				++c;
			}
		}
		return c;
	}
});
$.mix(String.prototype, {
	repeat: function(x) {
		return Array(++x).join(this);
	},
	find: String.prototype.indexOf
});
$.mix(buf, {
    l: 0,
    p: 0,
    line: function() {
        if (this.l === this.length) return;
        return this[this.l++];
    },
    get: function() {
        if (this.l === this.length) return;
        var rv = this[this.l].split(" ")[this.p++];
        var next = this[this.l].split(" ")[this.p];
        if (typeof rv === "undefined") {
            ++this.l;
            this.p = 0;
            return this.get();
        } else {
            if (typeof next === "undefined") {
                ++this.l;
                this.p = 0;
            }
            return rv;
        }
    }
});

// async loop
Number.prototype.times = function(fn) {
	var i = 0, that = this;
	setTimeout(function() {
		if (i < that) {
			fn(i++);
			setTimeout(arguments.callee, 0);
		}
	}, 0);
};

function main() {
	if (typeof ready === "function") $.exec(ready);
	$.geti().times(function(i) {
		console.log("Case #" + (++i) + ": " + $.exec(solve));
	});
};


////////////////////////////////////////////////////////////

function solve() {
    var a = getcm(5);
    var s = [], t;

    for (i;4;) s.push(a[i]);
    for (i;4;) s.push(a[0][i] + a[1][i] + a[2][i] + a[3][i]);
    s.push(a[0][0] + a[1][1] + a[2][2] + a[3][3]);
    s.push(a[3][0] + a[2][1] + a[1][2] + a[0][3]);

    for (i;s.length;) {
        t = s[i].split("").sort().join("");
        if (t === "OOOO" || t === "OOOT") {
            return "O won";
        } else if (t === "XXXX" || t === "TXXX") {
            return "X won";
        }
    }

    return a.join("").indexOf(".") >= 0 ?
           "Game has not completed" : "Draw";
}
