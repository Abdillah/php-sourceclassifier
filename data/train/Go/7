package main

import (
	"fmt"
	"strings"
)

type Board []string

func (b Board) Full() bool {
	return !(strings.Contains(b[0], ".") || strings.Contains(b[1], ".") || strings.Contains(b[2], ".") || strings.Contains(b[3], "."))
}

func (b Board) String() string {
	return fmt.Sprintf("%s\n%s\n%s\n%s", b[0], b[1], b[2], b[3])
}

func (b Board) CheckDiag1() string {
	first := b[0][0]
	for _, cell := range [][]int{{1, 1}, {2, 2}, {3, 3}} {
		r, c := cell[0], cell[1]
		if first == 'T' {
			first = b[r][c]
		}

		if first == '.' {
			return ""
		}

		if b[r][c] != first && b[r][c] != 'T' {
			return ""
		}
	}
	if first == 'X' || first == 'O' {
		return string(first)
	}
	return ""

}
func (b Board) CheckDiag2() string {
	first := b[0][3]
	for _, cell := range [][]int{{1, 2}, {2, 1}, {3, 0}} {
		r, c := cell[0], cell[1]
		if first == 'T' {
			first = b[r][c]
		}

		if first == '.' {
			return ""
		}

		if b[r][c] != first && b[r][c] != 'T' {
			return ""
		}
	}
	if first == 'X' || first == 'O' {
		return string(first)
	}
	return ""
}

func (b Board) CheckCols() string {
	for c := 0; c < 4; c++ {
		win := b.CheckCol(c)
		if win != "" {
			return win
		}
	}

	return ""

}
func (b Board) CheckRows() string {
	for r := 0; r < 4; r++ {
		win := b.CheckRow(r)
		if win != "" {
			return win
		}
	}

	return ""
}

func (b Board) CheckRow(row int) string {
	first := b[row][0]
	for c := 1; c < 4; c++ {
		if first == 'T' {
			first = b[row][c]
		}

		if first == '.' {
			return ""
		}
		if b[row][c] != first && b[row][c] != 'T' {
			return ""
		}
	}

	if first == 'X' || first == 'O' {
		return string(first)
	}
	return ""
}

func (b Board) CheckCol(col int) string {
	first := b[0][col]
	for r := 1; r < 4; r++ {
		if first == 'T' {
			first = b[r][col]
		}

		if first == '.' {
			return ""
		}
		if b[r][col] != first && b[r][col] != 'T' {
			return ""
		}
	}

	if first == 'X' || first == 'O' {
		return string(first)
	}
	return ""
}

func main() {

	var nc int
	fmt.Scan(&nc)

	for cs := 0; cs < nc; cs++ {
		b := make(Board, 4)
		for r := 0; r < 4; r++ {
			fmt.Scan(&b[r])
		}

		//Check wins

		var win string

		win = b.CheckCols()
		if win == "" {
			win = b.CheckRows()
			if win == "" {
				win = b.CheckDiag1()
				if win == "" {
					win = b.CheckDiag2()
				}
			}
		}

		switch {
		case win != "":
			fmt.Printf("Case #%d: %s won\n", cs+1, string(win))
		case b.Full() == true:
			fmt.Printf("Case #%d: Draw\n", cs+1)
		default:
			fmt.Printf("Case #%d: Game has not completed\n", cs+1)
		}
	}

}
