package main

import (
	"github.com/nise-nabe/fastio"
	"os"
)

func main() {
	s := fastio.NewInOut(os.Stdin, os.Stdout)
	for t, T := 1, s.Next(); t <= T; t++ {
		n := 4
		a := make([][]int, n)
		for i := 0; i < n; i++ {
			a[i] = make([]int, n)
			line := s.NextLine()
			for j := 0; j < n; j++ {
				if line[j] == 'X' {
					a[i][j] = 1
				}else if line[j] == 'O' {
					a[i][j] = 2
				}else if line[j] == 'T' {
					a[i][j] = 3
				}
			}
		}

		var resultStr string
		switch result(a) {
		case 1:
			resultStr = "X won"
		case 2:
			resultStr = "O won"
		case 3:
			resultStr = "Draw"
		case 4:
			resultStr = "Game has not completed"
		}
		s.Println("Case #", t, ": ", resultStr)
	}
	s.Flush()
}

func result(a [][]int) int {
	e := 0
	if r := tate(a); r < 3 {
		return r
	} else if r == 4{
		e++
	}
	if r := yoko(a); r < 3 {
		return r
	} else if r == 4{
		e++
	}
	if r := naname(a); r < 3 {
		return r
	} else if r == 4{
		e++
	}
	if r := gnaname(a); r < 3 {
		return r
	} else if r == 4{
		e++
	}
	if e > 0 {
		return 4
	}
	return 3
}


func tate(a [][]int) int {
	d, c := 0, 0
	for i := 0; i < 4; i++{
		x, o, t, e := 0, 0, 0, 0
		for j := 0; j < 4; j++ {
			switch a[j][i] {
			case 1:
				x++
			case 2:
				o++
			case 3:
				t++
			case 0:
				e++
			}
		}

		if e > 0 {
			c++
			continue
		} else if x == 4 || x == 3 && t == 1 {
			return 1
		} else if o == 4 || o == 3 && t == 1 {
			return 2
		} else {
			d++
			continue
		}
	}

	if c > 0 {
		return 4
	}
	return 3
}

func yoko(a [][]int) int {
	d, c := 0, 0
	for _, line := range a {
		x, o, t, e := 0, 0, 0, 0
		for _, v := range line {
			switch v {
			case 1:
				x++
			case 2:
				o++
			case 3:
				t++
			case 0:
				e++
			}
		}

		if e > 0 {
			c++
			continue
		} else if x == 4 || x == 3 && t == 1 {
			return 1
		} else if o == 4 || o == 3 && t == 1 {
			return 2
		} else {
			d++
			continue
		}
	}

	if c > 0 {
		return 4
	}
	return 3
}

func naname(a [][]int) int {
	x, o, t, e := 0, 0, 0, 0
	for i := 0; i < 4; i++ {
		switch a[i][i] {
		case 1:
			x++
		case 2:
			o++
		case 3:
			t++
		case 0:
			e++
		}
	}

	if e > 0 {
		return 4
	} else if x == 4 || x == 3 && t == 1 {
		return 1
	} else if o == 4 || o == 3 && t == 1 {
		return 2
	} else {
		return 3
	}
}

func gnaname(a [][]int) int {
	x, o, t, e := 0, 0, 0, 0
	for i := 0; i < 4; i++ {
		switch a[i][3-i] {
		case 1:
			x++
		case 2:
			o++
		case 3:
			t++
		case 0:
			e++
		}
	}

	if e > 0 {
		return 4
	} else if x == 4 || x == 3 && t == 1 {
		return 1
	} else if o == 4 || o == 3 && t == 1 {
		return 2
	} else {
		return 3
	}
}
