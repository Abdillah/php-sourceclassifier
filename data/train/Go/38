package main

import( 
	"fmt"
	"os"
	"bufio"
	"io"
)

const (
	Hor = iota
	Vert
	Diag
)

func ReadBoard(reader *bufio.Reader) (board [][]byte, isFull bool) {
	board = make([][]byte, 4)
	isFull = true
	
	for i := 0 ; i < 4 ; i++ {
		board[i] = make([]byte, 4)
		line, err := reader.ReadString('\n')
		if err != nil {
			panic(err)
		}
		for j := 0 ; j < len(line) ; j++ {
			if line[j] == '.' {
				isFull = false
			}
		}
		copy(board[i], line)
	}
	_, err := reader.ReadString('\n') 
	if err != nil && err != io.EOF {
			panic(err)
	}
	
	return board, isFull
}

func checkLineWin(player byte, line[]byte) bool {
	for i := 0 ; i < len(line) ; i++ {
		if player != line[i] && line[i] != 'T' {
			return false
		}
	}
	return true
}

func getLine(num, pattern int, board [][]byte) []byte {
	if num > len(board)-1 {
		panic("Index out of board")
	}
	
	if pattern == Hor {
		return board[num]
	} else if pattern == Vert {
		line := make([]byte, 4)
		for i := 0 ; i < len(board) ; i++ {
			line[i] = board[i][num]
		}
		return line
	} else if pattern == Diag {
		line := make([]byte, 4)
		if num == 0 {
			for i := 0 ; i < len(board) ; i++ {
				line[i] = board[i][i]
			}
			return line
		} else if num == 1 {
			for i := 0 ; i < len(board) ; i++ {
				line[i] = board[i][len(board)-i-1]
			}			
		}
		return line
	}
	
	panic("Not line found")
	return nil
}

func checkWins(player byte, board [][]byte) (bool) {
	// There are four vertical or horizontal directions
	for i := 0 ; i < 4 ; i++ {
		if checkLineWin(player, getLine(i, Hor, board)) {
			return true
		}
		if checkLineWin(player, getLine(i, Vert, board)) {
			return true
		}
	}
	
	// There can be two diagonal directions
	for i := 0 ; i < 2 ; i++ {
		if checkLineWin(player, getLine(i, Diag, board)) {
			return true
		}
	}
	
	return false
}

func main() {
	fi, err := os.Open("A-small-practice.in")
	if err != nil {
		panic(err)
	}
	
	reader := bufio.NewReader(fi)
	
	// Read the main parameters
	var T int
	fmt.Fscanf(fi, "%d", &T)
	//fmt.Printf("N: %d\n", T) 
	
	for t := 0 ; t < T ; t++ {
		board, isFull := ReadBoard(reader)
		X_wins := false
		O_wins := false
		//fmt.Println("Is full:", isFull)
		
		X_wins = checkWins('X', board)
		O_wins = checkWins('O', board)
		
		if O_wins {
			fmt.Printf("Case #%d: O won\n", t+1)
		} else if X_wins {
			fmt.Printf("Case #%d: X won\n", t+1)
		} else if !O_wins && !X_wins && !isFull {
			fmt.Printf("Case #%d: Game has not completed\n", t+1)
		}  else if !O_wins && !X_wins && isFull {
			fmt.Printf("Case #%d: Draw\n", t+1)
		}
	}
}