package main

import "fmt"

type Game []string

func scanGame() Game {
	g := make(Game, 4)
	fmt.Scanf("%s %s %s %s", &g[0], &g[1], &g[2], &g[3])
	fmt.Scanln()
	return g
}

type Pos struct {
	x int
	y int
}

var testPoints = [...][4]Pos{
	{ {0, 0}, {1, 0}, {2, 0}, {3, 0} },
	{ {0, 1}, {1, 1}, {2, 1}, {3, 1} },
	{ {0, 2}, {1, 2}, {2, 2}, {3, 2} },
	{ {0, 3}, {1, 3}, {2, 3}, {3, 3} },

	{ {0, 0}, {0, 1}, {0, 2}, {0, 3} },
	{ {1, 0}, {1, 1}, {1, 2}, {1, 3} },
	{ {2, 0}, {2, 1}, {2, 2}, {2, 3} },
	{ {3, 0}, {3, 1}, {3, 2}, {3, 3} },

	{ {0, 0}, {1, 1}, {2, 2}, {3, 3} },
	{ {3, 0}, {2, 1}, {1, 2}, {0, 3} },
}

var players = "XO"

func (g Game) status() string {
	anyDots := false
	for _, c := range(players) {
		for _, pts := range(testPoints) {
			match := true
			for _, p := range(pts) {
				actual := rune(g[p.y][p.x])
				if actual == '.' {
					anyDots = true
				}
				if actual != c && actual != 'T' {
					match = false
				}
			}
			if match {
				return string(c) + " won"
			}
		}
	}
	if anyDots {
		return "Game has not completed"
	}
	return "Draw"
}

func main() {
	var count int
	fmt.Scanln(&count)
	for i := 1; i <= count; i++ {
		game := scanGame()
		fmt.Printf("Case #%d: %s\n", i, game.status())
	}
}
