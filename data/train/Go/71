package main

import (
	"bufio"
	//"fmt"
	"os"
	"strconv"
	"strings"
)

func checkBoard(board [][]byte) byte {
	var hasEmptySpace bool

	// For each line, each column and both diagonal lines:
	//   check if any set of such four values equal three of the same values
	//   and a T or four of the same values.

	// Checking lines
	for i := 0; i < 4; i++ {
		var oCount int
		var xCount int
		var tCount int

		for j := 0; j < 4; j++ {
			boardValue := board[i][j]
			if boardValue == 'O' {
				oCount += 1
			} else if boardValue == 'X' {
				xCount += 1
			} else if boardValue == 'T' {
				tCount += 1
			} else if boardValue == '.' {
				hasEmptySpace = true
			}
		}

		// O wins
		if (tCount == 1 && oCount == 3) || oCount == 4 {
			return 1
		}

		// X wins
		if (tCount == 1 && xCount == 3) || xCount == 4 {
			return 2
		}
	}

	// Checking columns
	for i := 0; i < 4; i++ {
		var oCount int
		var xCount int
		var tCount int

		for j := 0; j < 4; j++ {
			boardValue := board[j][i]
			if boardValue == 'O' {
				oCount += 1
			} else if boardValue == 'X' {
				xCount += 1
			} else if boardValue == 'T' {
				tCount += 1
			} else if boardValue == '.' {
				hasEmptySpace = true
			}
		}

		// O wins
		if (tCount == 1 && oCount == 3) || oCount == 4 {
			return 1
		}

		// X wins
		if (tCount == 1 && xCount == 3) || xCount == 4 {
			return 2
		}
	}

	// Checking upper left - lower right diagonal
	{
		var oCount int
		var xCount int
		var tCount int

		for i := 0; i < 4; i++ {
			boardValue := board[i][i]
			if boardValue == 'O' {
				oCount += 1
			} else if boardValue == 'X' {
				xCount += 1
			} else if boardValue == 'T' {
				tCount += 1
			} else if boardValue == '.' {
				hasEmptySpace = true
			}
		}

		// O wins
		if (tCount == 1 && oCount == 3) || oCount == 4 {
			return 1
		}

		// X wins
		if (tCount == 1 && xCount == 3) || xCount == 4 {
			return 2
		}
	}

	// Checking lower left - upper right diagonal
	{
		var oCount int
		var xCount int
		var tCount int

		for i := 0; i < 4; i++ {
			boardValue := board[i][3-i]
			if boardValue == 'O' {
				oCount += 1
			} else if boardValue == 'X' {
				xCount += 1
			} else if boardValue == 'T' {
				tCount += 1
			} else if boardValue == '.' {
				hasEmptySpace = true
			}
		}

		// O wins
		if (tCount == 1 && oCount == 3) || oCount == 4 {
			return 1
		}

		// X wins
		if (tCount == 1 && xCount == 3) || xCount == 4 {
			return 2
		}
	}

	// No winner yet, If there's empty space on the board, then the game has
	//   not yet been completed. Otherwise, it's a draw.
	if hasEmptySpace {
		return 3
	} else {
		return 4
	}
	return 10
}

func main() {
	input, _ := os.Open(os.Args[1])
	reader := bufio.NewReader(input)
	firstLineRaw, _ := reader.ReadString('\n')
	firstLine := strings.Trim(firstLineRaw, " \n")
	numberOfCases, _ := strconv.ParseInt(firstLine, 10, 8)

	outFile, _ := os.Create("result.out")
	resultWriter := bufio.NewWriter(outFile)

	for i := 0; i < int(numberOfCases); i++ {
		var board [][]byte
		for i := 0; i < 4; i++ {
			sliceOfLine, _ := reader.ReadSlice('\n')
			board = append(board, sliceOfLine)
		}
		reader.ReadLine()

		result := checkBoard(board)
		if result == 1 {
			resultWriter.WriteString("Case #" + strconv.Itoa(i+1) + ": O won\n")
		} else if result == 2 {
			resultWriter.WriteString("Case #" + strconv.Itoa(i+1) + ": X won\n")
		} else if result == 3 {
			resultWriter.WriteString("Case #" + strconv.Itoa(i+1) + ": Game has not completed\n")
		} else {
			resultWriter.WriteString("Case #" + strconv.Itoa(i+1) + ": Draw\n")
		}
	}
	resultWriter.Flush()
	outFile.Close()
}
