Module main

    Sub Main()
        Console.Write("Pfad zum Input: ")
        Dim path As String = "test.txt" 'Console.ReadLine()
        Dim content As String() = IO.File.ReadAllLines(path)

        Dim MyGame As New TTTTGame(content)

        Console.ReadLine()
    End Sub

End Module
﻿Public Class TTTTGame
    'Public games As List(Of Game)

    Public Sub New(ByRef input As String())
        Dim ta As New List(Of String)
        Dim ca As Integer = 0

        Dim k = IO.File.CreateText("output.txt")


        For x As Integer = 1 To input.Length() - 1
            Dim line As String = input(x)
            If (line.Trim().Length() > 0) Then
                ta.Add(line)
            End If

            If ((line.Trim().Length() = 0) Or (x = input.Length() - 1)) Then
                ca += 1
                Dim g As New Game(ta)
                ta.Clear()

                g.Evaluate()
                Console.WriteLine("Case #" & ca & ": " & g.GetStateString())
                k.WriteLine("Case #" & ca & ": " & g.GetStateString())
                'games.Add(g)
            End If
        Next

        k.Close()
    End Sub


End Class

Public Class Game
    Public Enum GameState
        NotComplete = 0
        X_Won = 1
        O_Won = 2
        Draw = 3
    End Enum

    Public Class Row
        Public Class Field
            Public Enum FieldState
                Empty = 0
                X = 1
                O = 2
                T = 3
            End Enum

            Public state As New FieldState

            Public Sub New(ByRef fc As Char)
                Select Case fc
                    Case "." : state = FieldState.Empty
                    Case "X" : state = FieldState.X
                    Case "O" : state = FieldState.O
                    Case "T" : state = FieldState.T
                End Select
            End Sub
        End Class

        Public fields As New List(Of Field)

        Public Sub New(ByRef rs As String)
            For Each fc In rs
                fields.Add(New Field(fc))
            Next
        End Sub

        Public Function HasSpace() As Boolean
            For Each f In fields
                If (f.state = Field.FieldState.Empty) Then
                    Return True
                End If
            Next
            Return False
        End Function

        Public Function FourInARow() As GameState
            Dim X As Integer = 0
            Dim O As Integer = 0
            Dim T As Integer = 0

            For Each f In fields
                Select Case f.state
                    Case Field.FieldState.O : O += 1
                    Case Field.FieldState.X : X += 1
                    Case Field.FieldState.T : T += 1
                End Select
            Next

            If (T + O) = 4 Then
                Return GameState.O_Won
            ElseIf (T + X) = 4 Then
                Return GameState.X_Won
            Else
                Return GameState.NotComplete
            End If
        End Function

    End Class

    Public rows As New List(Of Row)
    Public state As New GameState

    Public Sub New(ByVal ta As List(Of String))
        For Each rs In ta
            rows.Add(New Row(rs))
        Next
    End Sub

    Private Function FourInAColumn(ByVal i As Integer) As GameState
        Dim X As Integer = 0
        Dim O As Integer = 0
        Dim T As Integer = 0

        For j As Integer = 0 To 3
            Dim f As Row.Field = rows(j).fields(i)
            Select Case f.state
                Case Row.Field.FieldState.O : O += 1
                Case Row.Field.FieldState.X : X += 1
                Case Row.Field.FieldState.T : T += 1
            End Select
        Next

        If (T + O) = 4 Then
            Return GameState.O_Won
        ElseIf (T + X) = 4 Then
            Return GameState.X_Won
        Else
            Return GameState.NotComplete
        End If
    End Function

    Private Function DiagonalCheckLeft() As GameState
        Dim X As Integer = 0
        Dim O As Integer = 0
        Dim T As Integer = 0

        For i As Integer = 0 To 3
            Dim f As Row.Field = rows(i).fields(i)
            Select Case f.state
                Case Row.Field.FieldState.O : O += 1
                Case Row.Field.FieldState.X : X += 1
                Case Row.Field.FieldState.T : T += 1
            End Select
        Next

        If (T + O) = 4 Then
            Return GameState.O_Won
        ElseIf (T + X) = 4 Then
            Return GameState.X_Won
        Else
            Return GameState.NotComplete
        End If
    End Function

    Private Function DiagonalCheckRight() As GameState
        Dim X As Integer = 0
        Dim O As Integer = 0
        Dim T As Integer = 0

        Dim j As Integer = 0
        For i As Integer = 3 To 0 Step -1
            Dim f As Row.Field = rows(j).fields(i)
            Select Case f.state
                Case Row.Field.FieldState.O : O += 1
                Case Row.Field.FieldState.X : X += 1
                Case Row.Field.FieldState.T : T += 1
            End Select

            j += 1
        Next

        If (T + O) = 4 Then
            Return GameState.O_Won
        ElseIf (T + X) = 4 Then
            Return GameState.X_Won
        Else
            Return GameState.NotComplete
        End If
    End Function

    Public Sub Evaluate()
        '========================================
        'linear check
        For Each r In rows
            Dim s As GameState = r.FourInARow()

            If (s = GameState.O_Won Or s = GameState.X_Won) Then
                state = s
                Exit Sub
            End If
        Next

        For i As Integer = 0 To 3
            Dim s As GameState = FourInAColumn(i)

            If (s = GameState.O_Won Or s = GameState.X_Won) Then
                state = s
                Exit Sub
            End If
        Next

        '========================================
        ' diagonal check
        Dim dr As GameState = DiagonalCheckRight()
        If (dr = GameState.O_Won Or dr = GameState.X_Won) Then
            state = dr
            Exit Sub
        End If

        Dim dl As GameState = DiagonalCheckLeft()
        If (dl = GameState.O_Won Or dl = GameState.X_Won) Then
            state = dl
            Exit Sub
        End If

        '========================================
        ' draw check
        For Each k In rows
            If (k.HasSpace()) Then
                state = GameState.NotComplete
                Exit Sub
            End If
        Next

        '========================================
        ' only option left
        state = GameState.Draw
    End Sub

    Public Function GetStateString() As String
        Select Case state
            Case GameState.O_Won : Return "O won"
            Case GameState.X_Won : Return "X won"
            Case GameState.Draw : Return "Draw"
            Case GameState.NotComplete : Return "Game has not completed"
        End Select
    End Function
End Class

