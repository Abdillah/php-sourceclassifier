import Data.List

main = interact problem

problem =
  unlines . map printResult . zip [1..] . map solve . parseInput

parseInput = parseCases . tail . lines

parseCases [] = []
parseCases (a:b:c:d:"":r) =
  map (map f) [a,b,c,d] : parseCases r
  where
    f 'X' = 2
    f 'O' = 3
    f 'T' = 6
    f '.' = 1

solve t =
  g $ map f t ++ map f (transpose t) ++ map f (diag t)
  where
    f [a,b,c,d] = a*b*c*d
    g [] = if h
           then "Game has not completed"
           else "Draw"
    g (n:ns)
      | mod n 16 == 0 = "X won"
      | mod n 81 == 0 = "O won"
      | otherwise = g ns
    h = any (== 1) $ concat t

diag [[a,_,_,e],[_,b,f,_],[_,g,c,_],[h,_,_,d]] = [[a,b,c,d],[e,f,g,h]]

printResult (c, r) = "Case #" ++ show c ++ ": " ++ r
