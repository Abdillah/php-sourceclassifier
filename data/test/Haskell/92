{-# LANGUAGE ScopedTypeVariables #-}
import Debug.Trace

main = do                 
  count <- getLine
  cases <- mapM parseCase [1..read count]
  mapM (\(i,x) ->
         putStrLn $ "Case #" ++ show i ++ ": " ++ showResult x)  (zip [1..] cases)
    
    
parseCase :: Int -> IO Game
parseCase i = do
  (ls :: [String]) <- mapM (\_x -> getLine) [0..3]
  _ <- getLine

  let result = concatMap (map conv) ls
  if length result == 16
     then return result
     else error ("bad result length for " ++ show i ++ ": " ++ show result)

conv :: Char -> Square
conv 'X' = X
conv 'O' = O
conv 'T' = T
conv '.' = Dot
conv x = error ("can't handle " ++ show x)
  
data Square = X | O | T | Dot
  deriving (Eq,Ord,Show)
type Game = [Square]

showResult :: Game -> String
showResult game
  | isWon X game = "X won"
  | isWon O game = "O won"
  | all (/= Dot) game = "Draw"
  | otherwise = "Game has not completed"
                
isWon :: Square -> Game -> Bool
isWon piece game = not . null $ filter allSet patterns
  where 
    patterns = [[0, 1, 2, 3],
                [4, 5, 6, 7],
                [8, 9, 10,11],
                [12,13,14,15],
                [0,4,8,12],
                [1,5,9,13],
                [2,6,10,14],
                [3,7,11,15],
                [0,5,10,15],
                [3,6,9,12]]
    
    allSet :: [Int] -> Bool
    allSet = all (\x -> let sq =  game !! x in 
                   sq == T || sq == piece)
